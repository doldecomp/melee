name: build-melee
run-name: Build Melee

on:
  push:
  pull_request:

jobs:
  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository }}/build-linux:latest
    strategy:
      matrix:
        make_flags: ["GENERATE_MAP=1", "NON_MATCHING=1"]
      fail-fast: false

    steps:
    - name: Checkout Melee repository
      uses: actions/checkout@v3

    - name: Log into container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull build image
      run: docker pull "$REGISTRY/$IMAGE"

    - name: Build Melee
      env:
        MAKE_FLAGS: ${{ matrix.make_flags }}
      run: |
        docker run --rm \
          --volume "$PWD:/input:ro" \
          --volume /tmp/output:/output \
          --env MAKE_FLAGS="$MAKE_FLAGS" \
          "$REGISTRY/$IMAGE"

    - name: Upload map
      if: matrix.make_flags == 'GENERATE_MAP=1'
      uses: actions/upload-artifact@v3
      with:
        name: GALE01.map
        path: /tmp/output/ssbm.us.1.2/GALE01.map

    - name: Set step summary
      if: matrix.make_flags == 'GENERATE_MAP=1'
      run: cat /tmp/output/PROGRESS.md >> $GITHUB_STEP_SUMMARY

  build-windows:
    name: Windows
    runs-on: windows-latest
    env:
      REGISTRY: ghcr.io
      IMAGE: ${{ github.repository }}/build-windows:latest
      MAKE_FLAGS: ${{ matrix.make_flags }}
    strategy:
      matrix:
        make_flags: ["GENERATE_MAP=1", "NON_MATCHING=1"]
      fail-fast: false

    steps:
    - name: Checkout Melee repository
      uses: actions/checkout@v3

    - name: Log into container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull build image
      shell: bash
      run: docker pull "$REGISTRY/$IMAGE"

    - name: Build Melee
      env:
        MAKE_FLAGS: ${{ matrix.make_flags }}
      run: |
        $output = New-Item `
          -Path "$env:TEMP/Output" `
          -ItemType Directory `
          -Force

        # the container's user needs to be able to write to the runner's dir
        icacls $output /T /grant 'Everyone:(OI)(CI)(F)'

        docker run --rm `
        --volume "${PWD}:C:/Input:ro" `
        --volume "${output}:C:/Output" `
        --env MAKE_FLAGS="$env:MAKE_FLAGS" `
        "$env:REGISTRY/$env:IMAGE"
