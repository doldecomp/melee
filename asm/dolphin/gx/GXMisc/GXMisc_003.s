.include "macros.inc"

.section .text

GXTokenInterruptHandler:
/* 8033CE80 00339A60  7C 08 02 A6 */	mflr r0
/* 8033CE84 00339A64  90 01 00 04 */	stw r0, 4(r1)
/* 8033CE88 00339A68  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 8033CE8C 00339A6C  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 8033CE90 00339A70  93 C1 02 D8 */	stw r30, 0x2d8(r1)
/* 8033CE94 00339A74  7C 9E 23 78 */	mr r30, r4
/* 8033CE98 00339A78  80 0D BC 80 */	lwz r0, lbl_804D7320@sda21(r13)
/* 8033CE9C 00339A7C  80 6D BC 58 */	lwz r3, __peReg@sda21(r13)
/* 8033CEA0 00339A80  28 00 00 00 */	cmplwi r0, 0
/* 8033CEA4 00339A84  A3 E3 00 0E */	lhz r31, 0xe(r3)
/* 8033CEA8 00339A88  41 82 00 34 */	beq lbl_8033CEDC
/* 8033CEAC 00339A8C  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CEB0 00339A90  48 00 83 A5 */	bl OSClearContext
/* 8033CEB4 00339A94  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CEB8 00339A98  48 00 81 D5 */	bl OSSetCurrentContext
/* 8033CEBC 00339A9C  81 8D BC 80 */	lwz r12, lbl_804D7320@sda21(r13)
/* 8033CEC0 00339AA0  38 7F 00 00 */	addi r3, r31, 0
/* 8033CEC4 00339AA4  7D 88 03 A6 */	mtlr r12
/* 8033CEC8 00339AA8  4E 80 00 21 */	blrl 
/* 8033CECC 00339AAC  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CED0 00339AB0  48 00 83 85 */	bl OSClearContext
/* 8033CED4 00339AB4  7F C3 F3 78 */	mr r3, r30
/* 8033CED8 00339AB8  48 00 81 B5 */	bl OSSetCurrentContext
lbl_8033CEDC:
/* 8033CEDC 00339ABC  80 6D BC 58 */	lwz r3, __peReg@sda21(r13)
/* 8033CEE0 00339AC0  A4 03 00 0A */	lhzu r0, 0xa(r3)
/* 8033CEE4 00339AC4  54 00 07 B8 */	rlwinm r0, r0, 0, 0x1e, 0x1c
/* 8033CEE8 00339AC8  60 00 00 04 */	ori r0, r0, 4
/* 8033CEEC 00339ACC  B0 03 00 00 */	sth r0, 0(r3)
/* 8033CEF0 00339AD0  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 8033CEF4 00339AD4  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 8033CEF8 00339AD8  83 C1 02 D8 */	lwz r30, 0x2d8(r1)
/* 8033CEFC 00339ADC  7C 08 03 A6 */	mtlr r0
/* 8033CF00 00339AE0  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 8033CF04 00339AE4  4E 80 00 20 */	blr 

.global GXSetDrawDoneCallback
GXSetDrawDoneCallback:
/* 8033CF08 00339AE8  7C 08 02 A6 */	mflr r0
/* 8033CF0C 00339AEC  90 01 00 04 */	stw r0, 4(r1)
/* 8033CF10 00339AF0  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 8033CF14 00339AF4  93 E1 00 14 */	stw r31, 0x14(r1)
/* 8033CF18 00339AF8  93 C1 00 10 */	stw r30, 0x10(r1)
/* 8033CF1C 00339AFC  7C 7E 1B 78 */	mr r30, r3
/* 8033CF20 00339B00  83 ED BC 84 */	lwz r31, lbl_804D7324@sda21(r13)
/* 8033CF24 00339B04  48 00 A4 41 */	bl OSDisableInterrupts
/* 8033CF28 00339B08  93 CD BC 84 */	stw r30, lbl_804D7324@sda21(r13)
/* 8033CF2C 00339B0C  48 00 A4 61 */	bl OSRestoreInterrupts
/* 8033CF30 00339B10  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 8033CF34 00339B14  7F E3 FB 78 */	mr r3, r31
/* 8033CF38 00339B18  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 8033CF3C 00339B1C  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 8033CF40 00339B20  7C 08 03 A6 */	mtlr r0
/* 8033CF44 00339B24  38 21 00 18 */	addi r1, r1, 0x18
/* 8033CF48 00339B28  4E 80 00 20 */	blr 

# https://decomp.me/scratch/PoUPM
GXFinishInterruptHandler:
/* 8033CF4C 00339B2C  7C 08 02 A6 */	mflr r0
/* 8033CF50 00339B30  38 60 00 01 */	li r3, 1
/* 8033CF54 00339B34  90 01 00 04 */	stw r0, 4(r1)
/* 8033CF58 00339B38  94 21 FD 20 */	stwu r1, -0x2e0(r1)
/* 8033CF5C 00339B3C  93 E1 02 DC */	stw r31, 0x2dc(r1)
/* 8033CF60 00339B40  3B E4 00 00 */	addi r31, r4, 0
/* 8033CF64 00339B44  80 AD BC 58 */	lwz r5, __peReg@sda21(r13)
/* 8033CF68 00339B48  A0 05 00 0A */	lhz r0, 0xa(r5)
/* 8033CF6C 00339B4C  54 00 07 76 */	rlwinm r0, r0, 0, 0x1d, 0x1b
/* 8033CF70 00339B50  60 00 00 08 */	ori r0, r0, 8
/* 8033CF74 00339B54  B0 05 00 0A */	sth r0, 0xa(r5)
/* 8033CF78 00339B58  80 0D BC 84 */	lwz r0, lbl_804D7324@sda21(r13)
/* 8033CF7C 00339B5C  98 6D BC 88 */	stb r3, lbl_804D7328@sda21(r13)
/* 8033CF80 00339B60  28 00 00 00 */	cmplwi r0, 0
/* 8033CF84 00339B64  41 82 00 30 */	beq lbl_8033CFB4
/* 8033CF88 00339B68  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CF8C 00339B6C  48 00 82 C9 */	bl OSClearContext
/* 8033CF90 00339B70  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CF94 00339B74  48 00 80 F9 */	bl OSSetCurrentContext
/* 8033CF98 00339B78  81 8D BC 84 */	lwz r12, lbl_804D7324@sda21(r13)
/* 8033CF9C 00339B7C  7D 88 03 A6 */	mtlr r12
/* 8033CFA0 00339B80  4E 80 00 21 */	blrl 
/* 8033CFA4 00339B84  38 61 00 10 */	addi r3, r1, 0x10
/* 8033CFA8 00339B88  48 00 82 AD */	bl OSClearContext
/* 8033CFAC 00339B8C  7F E3 FB 78 */	mr r3, r31
/* 8033CFB0 00339B90  48 00 80 DD */	bl OSSetCurrentContext
lbl_8033CFB4:
/* 8033CFB4 00339B94  38 6D BC 8C */	addi r3, r13, GXDrawDoneThreadQueue@sda21
/* 8033CFB8 00339B98  48 00 EB 49 */	bl OSWakeupThread
/* 8033CFBC 00339B9C  80 01 02 E4 */	lwz r0, 0x2e4(r1)
/* 8033CFC0 00339BA0  83 E1 02 DC */	lwz r31, 0x2dc(r1)
/* 8033CFC4 00339BA4  38 21 02 E0 */	addi r1, r1, 0x2e0
/* 8033CFC8 00339BA8  7C 08 03 A6 */	mtlr r0
/* 8033CFCC 00339BAC  4E 80 00 20 */	blr 

# https://decomp.me/scratch/PIzZj // 3200 (0%)
.global __GXPEInit
__GXPEInit:
/* 8033CFD0 00339BB0  7C 08 02 A6 */	mflr r0
/* 8033CFD4 00339BB4  3C 60 80 34 */	lis r3, GXTokenInterruptHandler@ha
/* 8033CFD8 00339BB8  90 01 00 04 */	stw r0, 4(r1)
/* 8033CFDC 00339BBC  38 83 CE 80 */	addi r4, r3, GXTokenInterruptHandler@l
/* 8033CFE0 00339BC0  38 60 00 12 */	li r3, 0x12
/* 8033CFE4 00339BC4  94 21 FF F8 */	stwu r1, -8(r1)
/* 8033CFE8 00339BC8  48 00 A3 C9 */	bl __OSSetInterruptHandler
/* 8033CFEC 00339BCC  3C 60 80 34 */	lis r3, GXFinishInterruptHandler@ha
/* 8033CFF0 00339BD0  38 83 CF 4C */	addi r4, r3, GXFinishInterruptHandler@l
/* 8033CFF4 00339BD4  38 60 00 13 */	li r3, 0x13
/* 8033CFF8 00339BD8  48 00 A3 B9 */	bl __OSSetInterruptHandler
/* 8033CFFC 00339BDC  38 6D BC 8C */	addi r3, r13, GXDrawDoneThreadQueue@sda21
/* 8033D000 00339BE0  48 00 DD 2D */	bl OSInitThreadQueue
/* 8033D004 00339BE4  38 60 20 00 */	li r3, 0x2000
/* 8033D008 00339BE8  48 00 A7 AD */	bl __OSUnmaskInterrupts
/* 8033D00C 00339BEC  38 60 10 00 */	li r3, 0x1000
/* 8033D010 00339BF0  48 00 A7 A5 */	bl __OSUnmaskInterrupts
/* 8033D014 00339BF4  80 6D BC 58 */	lwz r3, __peReg@sda21(r13)
/* 8033D018 00339BF8  A4 03 00 0A */	lhzu r0, 0xa(r3)
/* 8033D01C 00339BFC  54 00 07 B8 */	rlwinm r0, r0, 0, 0x1e, 0x1c
/* 8033D020 00339C00  60 00 00 04 */	ori r0, r0, 4
/* 8033D024 00339C04  54 00 07 76 */	rlwinm r0, r0, 0, 0x1d, 0x1b
/* 8033D028 00339C08  60 00 00 08 */	ori r0, r0, 8
/* 8033D02C 00339C0C  54 00 00 3C */	rlwinm r0, r0, 0, 0, 0x1e
/* 8033D030 00339C10  60 00 00 01 */	ori r0, r0, 1
/* 8033D034 00339C14  54 00 07 FA */	rlwinm r0, r0, 0, 0x1f, 0x1d
/* 8033D038 00339C18  60 00 00 02 */	ori r0, r0, 2
/* 8033D03C 00339C1C  B0 03 00 00 */	sth r0, 0(r3)
/* 8033D040 00339C20  80 01 00 0C */	lwz r0, 0xc(r1)
/* 8033D044 00339C24  38 21 00 08 */	addi r1, r1, 8
/* 8033D048 00339C28  7C 08 03 A6 */	mtlr r0
/* 8033D04C 00339C2C  4E 80 00 20 */	blr 
