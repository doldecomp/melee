#ifndef GALE01_07C930
#define GALE01_07C930

#include <platform.h>
#include "ft/forward.h"
#include "ftCommon/forward.h"
#include <dolphin/mtx.h>
#include <baselib/forward.h>

#include <dolphin/mtx.h>
#include <baselib/gobjproc.h>
#include <baselib/jobj.h>

void ftCommon_8007C930(ftCo_Fighter*, float);
void ftCommon_8007C98C(ftCo_Fighter*, float vel, float, float gr_friction);
void ftCommon_8007CA80(ftCo_Fighter* fp, float result, float, float);
void ftCommon_8007CADC(ftCo_Fighter*, float, float, float);
void ftCommon_8007CB74(ftCo_GObj*);
ftCo_GObj* ftCommon_8007CC1C(ftCo_GObj*);
void ftCommon_8007CC78(ftCo_Fighter*, float);
void ftCommon_8007CCA0(ftCo_Fighter*, float);
void ftCommon_8007CCE8(ftCo_Fighter*);
float ftCommon_8007CD6C(float, float decrement);
float ftCommon_8007CDA4(ftCo_Fighter*);
float ftCommon_8007CDF8(ftCo_Fighter*);
void ftCommon_8007CE4C(ftCo_Fighter*, float);
void ftCommon_8007CE94(ftCo_Fighter*, float);
void ftCommon_8007CEF4(ftCo_Fighter*);
bool ftCommon_8007CF58(ftCo_Fighter*);
bool ftCommon_8007D050(ftCo_Fighter*, float);
void ftCommon_8007D140(ftCo_Fighter*, float, float, float);
void ftCommon_8007D174(ftCo_Fighter*, float, float, float, float);
void ftCommon_8007D268(ftCo_Fighter*);
void ftCommon_8007D28C(ftCo_Fighter*, float);
void ftCommon_8007D2E8(ftCo_Fighter*, float, float);
void ftCommon_8007D344(ftCo_Fighter*, float, float, float);
void ftCommon_8007D3A8(ftCo_Fighter*, float, float, float);
void ftCommon_8007D440(ftCo_Fighter*, float);
void ftCommon_8007D468(ftCo_Fighter*);
void ftCommon_8007D494(ftCo_Fighter*, float, float);
void ftCommon_8007D4B8(ftCo_Fighter*);
void ftCommon_8007D4E4(ftCo_Fighter*);
void ftCommon_ClampFallSpeed(ftCo_Fighter*, float);
void ftCommon_8007D508(ftCo_Fighter*, float, float);
bool ftCommon_8007D528(ftCo_Fighter*);
void ftCommon_8007D5BC(ftCo_Fighter*);

/// Air_StoreBool_LoseGroundJump_NoECBfor10Frames
void ftCommon_8007D5D4(ftCo_Fighter*);

void ftCommon_8007D60C(ftCo_Fighter*);
void ftCommon_8007D698(ftCo_Fighter*);
void ftCommon_8007D6A4(ftCo_Fighter*);
void ftCommon_8007D780(ftCo_Fighter*);
void ftCommon_8007D7FC(ftCo_Fighter*);
void ftCommon_8007D92C(ftCo_GObj*);
float ftCo_GetLStickAngle(ftCo_Fighter* fp);
float ftCo_GetCStickAngle(ftCo_Fighter* fp);
float ftCommon_8007D9D4(ftCo_Fighter*);
void ftCommon_8007D9FC(ftCo_Fighter*);
void ftCommon_8007DA24(ftCo_Fighter*);
float ftCommon_CalcHitlag(int dmg, FtMotionId msid, float mul);
void ftCommon_8007DB24(ftCo_GObj*);
void ftCommon_8007DB58(ftCo_GObj*);
void ftCommon_8007DBCC(ftCo_Fighter*, bool, float);
bool ftCommon_8007DC08(ftCo_Fighter*, float);
void ftCommon_8007DD7C(ftCo_GObj*, Vec3*);
void ftCommon_8007DFD0(ftCo_GObj* gobj, Vec3* arg1);
void ftCommon_8007E0E4(ftCo_GObj*);
ftCo_GObj* ftCommon_8007E2A4(ftCo_GObj*);
void ftCommon_8007E2F4(ftCo_Fighter*, s16 val);

/// Fighter_KillAllVelocity
void ftCommon_8007E2FC(ftCo_GObj*);

void ftCommon_8007E358(ftCo_GObj*);
void ftCommon_8007E3EC(ftCo_GObj*);
void ftCommon_8007E5AC(ftCo_Fighter*);
void ftCommon_SetAccessory(ftCo_Fighter*, HSD_Joint*);
void ftCommon_8007E690(ftCo_Fighter*, HSD_AnimJoint*);
void ftCommon_8007E6DC(ftCo_GObj*, ftCo_GObj* gobj, s32);
void ftCommon_8007E79C(ftCo_GObj*, s32);
void ftCommon_8007E7E4(ftCo_GObj*, s32);
void ftCommon_8007E82C(ftCo_GObj*);
void ftCommon_8007E83C(ftCo_GObj*, s32, float div);
s32 ftGetParasolStatus(ftCo_GObj*);
void ftCommon_8007EA90(ftCo_Fighter*, s32);
void ftCommon_8007EBAC(ftCo_Fighter*, u32, u32);
void ftCommon_8007EC30(u32, u32);
void ftCommon_8007ECD4(ftCo_Fighter*, s32);
void ftCommon_8007ED2C(ftCo_Fighter*);
void ftCommon_8007ED50(ftCo_Fighter*, s32);
void ftCommon_8007EE0C(ftCo_Fighter*, s32);
void ftCommon_8007EEC8(ftCo_Fighter*, s32, s32);
void ftCommon_8007EF5C(ftCo_Fighter*, s32);
void ftCommon_8007EFC0(ftCo_Fighter*, u32 val);
void ftCommon_8007EFC8(ftCo_GObj*, void (*)(ftCo_GObj*));
void ftCommon_8007F578(ftCo_GObj*);
void ftCommon_8007F5CC(ftCo_GObj*, s32);
float ftCommon_GetModelScale(ftCo_Fighter*);
void ftCommon_8007F6A4(ftCo_Fighter*, HSD_JObj*);
void ftCommon_8007F76C(ftCo_GObj*);
void ftCommon_8007F7B4(ftCo_GObj*);
Mtx* ftCommon_8007F804(ftCo_Fighter*);
void ftCommon_8007F824(ftCo_GObj*);
void ftCommon_8007F86C(ftCo_GObj*);
void ftCommon_8007F8B4(ftCo_Fighter*, Vec3* v);
void ftCommon_8007F8E8(ftCo_GObj*);
void ftCommon_8007F948(ftCo_GObj*, ftCo_GObj*, s32);
void ftCommon_8007F9B4(ftCo_GObj*);
void ftCommon_8007FA00(ftCo_GObj*);
void ftCommon_8007FA58(ftCo_GObj*, ftCo_GObj*);
void ftCommon_8007FC7C(ftCo_GObj*, float);
void ftCommon_8007FDA0(ftCo_GObj*);
void ftCommon_8007FF74(ftCo_GObj*);
bool ftCommon_8007FFD8(ftCo_Fighter*, float);
bool ftCommon_80080144(ftCo_Fighter*);
void ftCommon_80080174(ftCo_Fighter* fp);
void ftCommon_8008021C(ftCo_GObj*);
void ftCommon_8008031C(ftCo_GObj*);
void ftCommon_80080460(ftCo_Fighter*);
void ftCommon_80080474(ftCo_Fighter*);
void ftCommon_80080484(ftCo_Fighter*);
void ftCommon_800804A0(ftCo_Fighter*, float);
void ftCommon_800804FC(ftCo_Fighter*);

void ftCommon_8007E2D0(ftCo_Fighter*, s16, HSD_GObjEvent, HSD_GObjEvent,
                       void (*)(ftCo_GObj*, ftCo_GObj*));

/// @todo static
void ftCommon_8007FE84(ftCo_GObj*, ftCo_GObj*, s32, float);

/// @todo @c DataOffset_PlayerScale_MultiplyBySomething
/// @returns <tt>fp->x40*fp->x34</tt>
float ftCommon_800804EC(ftCo_Fighter*);

#endif
