#!/usr/bin/env python3

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, Optional, cast

import humanfriendly
import mistletoe
from mistletoe.block_token import BlockToken, Table, TableRow, re
from mistletoe.span_token import RawText
from mistletoe.token import Token


def read_wiki(lines) -> Dict[str, Dict[str, str]]:
    assignees = {}

    def read_text(token: Token) -> str:
        if isinstance(token, RawText):
            return re.sub(r"<!--.*?-->", "", cast(str, token.content)).strip()

        assert token.children is not None
        return read_text(next(c for c in token.children))

    def read_tr(token: TableRow):
        assert token.children is not None
        td = list(map(read_text, token.children))

        assignee = {}
        if len(td) > 5 and td[5]:
            assignee["discord"] = td[5]
        if len(td) > 6 and td[6]:
            assignee["github"] = td[6]

        if assignee:
            assignees[td[0]] = assignee

    def read_table(token: Table):
        assert token.children is not None
        for child in token.children:
            if isinstance(child, TableRow):
                read_tr(child)

    def read_block(token: BlockToken):
        assert token.children is not None
        for child in token.children:
            if isinstance(child, Table):
                read_table(child)
            elif isinstance(child, BlockToken):
                read_block(child)

    read_block(mistletoe.Document(lines))
    return assignees


def read(args):
    if args.wiki_path == "-":
        fp = sys.stdin
    else:
        fp = Path(args.wiki_path).open("r")

    assignees = read_wiki(fp)
    __import__("pprint").pprint(assignees)


def write(args):
    if args.report_path == "-":
        data = json.load(sys.stdin)
    else:
        path = Path(args.report_path)
        data = json.load(path.open("r"))

    assignees = {}
    if cast(Optional[Path], args.wiki_path):
        md = args.wiki_path.read_text()
        assignees = read_wiki(md)

    print(
        """# Translation Units

Edit this page and fill in your own username to assign yourself to a file.

Just write your username as plaintext and it will be formatted automatically later.

File|Matched|Total|%|:grey_question:|Assignee<br>Discord|Assignee<br>GitHub
-|-|-|-|-|-|-"""
    )
    for unit in data["units"] or []:

        def friendly_size(value: int) -> str:
            return f"`{humanfriendly.format_size(value).replace('bytes', 'B')}`"

        # Strip "main/" by splitting on "/" and recombining
        file = "/".join((unit["name"] or "/").split("/")[1:])
        # Link to source file
        file_link = f"[`{file}`](../blob/master/src/{file}.c)"

        matched_code = int(unit["measures"].get("matched_code") or 0)
        total_code = int(unit["measures"].get("total_code") or 0)
        code_percent = float(unit["measures"].get("matched_code_percent") or 0)
        matched = f"{friendly_size(matched_code)}"
        total = f"{friendly_size(total_code)}"
        percent = f"`{humanfriendly.round_number(code_percent)}%`"
        linked = ":heavy_check_mark:" if unit["metadata"].get("complete") else ":x:"

        assignee = assignees.get(file, {})

        if "discord" in assignee:
            discord = f"`{assignee['discord']}`"
        else:
            discord = "<!-- Discord -->"

        if "github" in assignee:
            github = f"[{assignee['github']}](../commits?author={assignee['github']})"
        else:
            github = "<!-- GitHub -->"

        print(f"{file_link}|{matched}|{total}|{percent}|{linked}|{discord}|{github}")


def main():
    parser = argparse.ArgumentParser(
        description="Generates and parses the wiki's list of translation units."
    )
    subparsers = parser.add_subparsers(dest="subcommand")

    parser_write = subparsers.add_parser("write", help="Write JSON data to a file.")
    parser_write.add_argument(
        "report_path",
        metavar="REPORT",
        nargs="?",
        const="-",
        default=None,
        type=str,
        help="Path to the JSON report generated by objdiff-cli.",
    )
    parser_write.add_argument(
        "wiki_path",
        metavar="WIKI",
        nargs="?",
        default=None,
        type=Path,
        help="Path to the existing Translation Units wiki page.",
    )
    parser_write.set_defaults(func=write)

    parser_read = subparsers.add_parser("read", help="test reading markdown")
    parser_read.add_argument(
        "wiki_path",
        metavar="WIKI",
        nargs="?",
        const="-",
        default=None,
        type=str,
        help="Path to the wiki markdown.",
    )
    parser_read.set_defaults(func=read)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
